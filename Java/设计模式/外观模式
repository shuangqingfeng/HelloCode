统一编程接口-->外观模式
	通过一个外观类使得整个系统的接口只有一个统一的高层接口，这样能能够降低用户的
	使用成本，也对用户屏蔽了很多实现细节。

	定义：
		要求一个子系统的外部于其内部的通信必须通过一个统一的对象进行。
		门面模式(Facade 模式) 提供一个高层次的接口，使得子系统更易于使用。

	使用场景：
		1.为一个复杂子系统提供一个简单接口。子系统往往因为不断演化而变得越来越复杂
		甚至可能被替换。大多数模式使用都会产生更多、更小的类，在这使子系统更具有可
		重用性的同时也更容易对子系统进行定制、修改，这种易变性使得隐藏子系统的具体
		实现变得尤为重要。Facade可以提供一个简单统一的接口，对外隐藏子系统的具体
		实现、隔离变化。
		2.当你需要构建一个层次结构的子系统时，使用Facade 模式定义子系统中每层的
		入口点。如果子系统之间是相互依赖的，你可以让他们仅通过 Facade 接口进行通信，
		从而简化了它们之间的依赖关系。

	Facade: 系统对外的统一接口，系统内部系统的工作。
	SystemA、SystemB、SystemC: 子系统接口。
	外观模式就是通过一个统一的接口对外提供服务，使得外部程序只通过一个类就可以
	实现系统内部的多种功能，而这些实现功能的内部子系统之间可能也有交互，或者说
	完成一个功能需要几个子系统之间进行协作，如果没有封装，那么用户就需要操作几个
	子系统的交互逻辑，容易出现错误。而通过外观类对外屏蔽这些复杂的交互，降低用户
	使用的成本。

	简单示例：

		public interface Phone {
		    //打电话
		    public void dail();

		    //挂断
		    public void hangup();
		}

		class PhoneImpl implements Phone {

		    @Override
		    public void dail() {
		        System.out.println("打电话");
		    }

		    @Override
		    public void hangup() {
		        System.out.println("挂断");
		    }
		}

		public interface Camera {
		    //打开相机
		    public void open();

		    //拍照
		    public void takePicture();

		    //关闭相机
		    public void close();
		}

		public class SamsungCamera implements Camera {
		    @Override
		    public void open() {
		        System.out.println("打开相机");
		    }

		    @Override
		    public void takePicture() {
		        System.out.println("拍照");
		    }

		    @Override
		    public void close() {
		        System.out.println("关闭相机");
		    }
		}

		public class MobilePhone {
		    private Phone mPhone = new PhoneImpl();
		    private Camera mCamera = new SamsungCamera();

		    public void dail() {
		        mPhone.dail();
		    }

		    public void videoChat() {
		        System.out.println("---> 视频聊天接通中");
		        mCamera.open();
		        mPhone.dail();
		    }

		    public void hangup() {
		        mPhone.hangup();
		    }

		    public void takePicture() {
		        mCamera.open();
		        mCamera.takePicture();
		    }

		    public void CloseCamera() {
		        mCamera.close();
		    }
		}

		public class Test {
		    public static void main(String[] args) {
		        MobilePhone nexus6 = new MobilePhone();
		        nexus6.takePicture();
		        nexus6.videoChat();
		    }
		}

	外观模式就是统一接口封装。将子系统的逻辑、交互隐藏起来，为用户提供一个高层次的
	接口，使得系统更加以用，同时对外隐藏了具体的实现，这样即使具体的子系统发生了
	变化，用户也不会感知到，因为用户使用的使Facade 高层接口，内部的变化对于用户
	来说并不可见。这样一来就将变化隔离开来，使得系统也更为灵活。

	Android 源码中的外观模式：
		Context 类
			Context 类只是定义了很多接口的抽象类，这些接口的功能的接口实现
			并不在Context及其子类中，而是通过其他系统来完成的。例如startActivity
			的真正实现是通过 ActivityManagerService，获取应用包相关信息是通过
			PackageManagerService。Context只是做了一个高层次的统一封装，Context
			只是一个抽象类，它得真正实现在ContextImpl 类中，而它就是外观类。


	优点：
		1.对客户程序隐藏子系统细节，因而减少了客户对于子系统的耦合，能够拥抱变化。
		2.外观类对子系统的接口封装，使得系统更易于使用。

	缺点：
		1.外观类接口膨胀。由于子系统的接口都有外观类统一对外暴漏，使得外观类的API 接口较多，在一定程度上增加了用户使用成本。
		2.外观类没有遵循开闭原则，当业务出现变更时，可能需要直接修改外观类。