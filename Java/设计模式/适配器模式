得心应手的”粘合剂“ -->适配器模式
	适配器就是将两个不兼容的类融合在一起，有点像粘合剂，将不同的东西通过一种转换
	使得它们能够协作起来。

	定义：
		适配器模式把一个类的接口变换成客户端所期待的另一种接口，从而使原本因接口
		不匹配而无法在一起工作的两个类能够在一起工作。

	使用场景：
		1.系统需要使用现有的类，而此类的接口不符合系统的需要，即接口不兼容。
		2.想要建立一个可以重复使用的类，用于一些彼此之间没有太大关联的一些类，包括
		一些可能在将来引进的类一起工作。
		3.需要一个统一的输出接口，而输入端的类型不可预知。

	适配器模式分为两种：
		1.类适配器模式
		2.对象适配器模式

		简单示例：
			类适配器模式
				通过实现Target 接口以及继承Adaptee 类来实现接口转换。

				/**
				 * 目标角色(Target)
				 * 也就是所期待得到的接口。
				 * 注意：由于这里讨论的是类适配器模式，因此目标不可是类
				 */
				public interface FiveVolt {

				    public int getVolt5();
				}

				/**
				 * Adaptee
				 * 现在需要适配适配接口
				 * 需要被转换的对象
				 */
				public class Volt220 {

				    public int getVolt220() {
				        return 220;
				    }
				}

				/**
				 * 适配器角色(Adapter)
				 * 也是本模式的核心
				 * 适配器把源接口转换成目标接口
				 * 显然，这一角色不可以是接口，而必须是具体类。
				 */
				public class VoltAdapter extends Volt220 implements FiveVolt{
				    @Override
				    public int getVolt5() {
				        return 5;
				    }
				}

				/**
				 * 测试
				 */
				class Test {
				    public static void main(String[] args) {
				        VoltAdapter adapter = new VoltAdapter();
				        System.out.println("输出：" + adapter.getVolt5());
				    }
				}
				#直接把220 转换成了5


			对象适配器模式
				把适配类的API转换成目标类的API，与类适配器模式不同的是，对象适配器模式不是使用继承关系连接到Adaptee类，而是使用代理关系连接到
				Adaptee类。

				/**
				 * Target 角色
				 */
				public interface FiveVolt {
				    public int getVolt5();
				}

				/**
				 * Adaptee 角色，需要被转换的对象
				 */
				public class Volt220 {
				    public int getVolt220() {
				        return 220;
				    }
				}

				/**
				 * 对象适配器模式
				 */
				public class VoltAdapter implements FiveVolt {

				    private Volt220 volt220;

				    public VoltAdapter(Volt220 volt220) {
				        this.volt220 = volt220;
				    }

				    public int getVolt220() {
				        return volt220.getVolt220();
				    }

				    @Override
				    public int getVolt5() {
				        return 5;
				    }
				}

				public class Test {
				    public static void main(String[] args) {
				        VoltAdapter adapter = new VoltAdapter(new Volt220());
				        System.out.println("输出：" + adapter.getVolt5());
				    }
				}

			这种实现方法直接将要被适配的对象传递到Adapter中，使用组合的形式实现
			接口兼容的效果。这比类适配器方式更为灵活，它的另一个好处是被适配对象
			中的方法不会暴露出来，而类适配器继承了被适配对象，因此，被适配对象类
			的函数在Adapter 类中也都含有，这使得Adapter 类出现一些奇怪的接口，
			用户使用成本较高。因此，对象适配器模式更加灵活、实用。


	Android源码中的适配器模式：
		ListView的Adapter 


	优点：
		1.更好的复用性：
			系统需要使用现有的类，而此类的接口不符合系统的需要。
			那么通过适配器模式就可以让这些功能得到更好的服用。
		2.更好的扩展性：
			在实现适配器功能的时候，可以调用自己开发的功能，从而自然的扩展
			系统的功能。

	缺点：
		过多的使用适配器，会让系统非常零乱，不易整体把握。
		例如，明明看到调用的是A接口，其实内部被适配成了B接口的实现，一个系统
		如果太多出现这种情况，无异于一场灾难。因此，如果不是很有必要，可以不使用
		适配器，而是直接对系统进行重构。