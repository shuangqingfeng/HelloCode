时势造英雄-->策略模式
	实现某一个功能可以有多种算法或者策略，我们根据实际情况选择不同的算法或者策略来完成该功能。

	定义：
		策略模式定义了一系列的算法，并将每一个算法封装起来，而且使他们还可以相互替换。策略模式让算法独立于使用它的客户而独立变化。

	使用场景：
		1.针对同一类型问题的多种处理方式，仅仅是具体行为有差别时；
		2.需要安全地封装多种同一类型地操作时；
		3.出现统一抽象类有多个子类，而又需要使用 if-else 或者 switch-case 来选择绝体子类时。

	简单实现：

	1. 未使用策略模式的版本
		public class PriceCalculator {

		    // 公交车类型
		    private static final int BUS = 1;
		    //地铁类型
		    private static final int SUBWAY = 2;

		    public static void main(String[] args) {
		        PriceCalculator calculator = new PriceCalculator();
		        System.out.println("坐16公里的公交车票价为：" + calculator.calculatePrice(16, BUS));
		        System.out.println("坐16公里的地铁票价为：" + calculator.calculatePrice(16, SUBWAY));
		    }

		    /**
		     * 公交车，十公里之内一元钱
		     * 超过十公里之后每加一元钱可以乘5公里
		     *
		     * @param km 公里
		     * @return
		     */
		    private int busPrice(int km) {
		        // 超过十公里的总距离
		        int extraTotal = km - 10;
		        //超过的距离是5公里的倍数
		        int extraFactor = extraTotal / 5;
		        //超过的距离对5公里取余
		        int fraction = extraTotal % 5;
		        // 加个集算
		        int price = 1 + extraFactor * 1;
		        return fraction > 0 ? ++price : price;
		    }

		    /**
		     * 6公里(含)内3元，6-12公里(含)4元
		     * 12-22公里(含)5元，22-32公里(含)6元
		     *
		     * @param km 公里
		     * @return
		     */
		    private int subwayPrice(int km) {
		        if (km <= 6) {
		            return 3;
		        } else if (km > 6 && km <= 12) {
		            return 4;
		        } else if (km > 12 && km <= 22) {
		            return 5;
		        } else if (km > 22 && km <= 32) {
		            return 6;
		        }
		        return 7;
		    }

		    int calculatePrice(int km, int type) {
		        if (type == BUS) {
		            return busPrice(km);
		        } else if (type == SUBWAY) {
		            return subwayPrice(km);
		        }
		        return 0;
		    }
		}

	 很明显的问题就是PriceCalculator类明显的问题就是并不是单一职责，首先它承担了
	 计算公交和地铁加个的职责，还有就是 通过 if-else 的形式来判断使用那种计算形
	 式，当我们增加一种出租车的加个，那么就需要在添加一个方法，并且在 if-else 里面在增加一个判断，而且代码已经开始混乱，结构已经不清晰了。

	2.通过策略模式重构

		/**
		 * 计算接口
		 */
		public interface CalculateStrategy {

		    /**
		     * 按距离计算加个
		     *
		     * @param km 公里
		     * @return 返回价格
		     */
		    int calculatePrice(int km);
		}

		/**
		 * 公交车价格计算策略
		 */
		class BusStrategy implements CalculateStrategy {

		    /**
		     * 公交车，十公里之内一元钱
		     * 超过十公里之后每加一元钱可以乘5公里
		     *
		     * @param km 公里
		     * @return
		     */
		    @Override
		    public int calculatePrice(int km) {
		        // 超过十公里的总距离
		        int extraTotal = km - 10;
		        //超过的距离是5公里的倍数
		        int extraFactor = extraTotal / 5;
		        //超过的距离对5公里取余
		        int fraction = extraTotal % 5;
		        // 加个集算
		        int price = 1 + extraFactor * 1;
		        return fraction > 0 ? ++price : price;
		    }
		}

		/**
		 * 公交车价格计算策略
		 */
		class SubwayStrategy implements CalculateStrategy {

		    /**
		     * 6公里(含)内3元，6-12公里(含)4元
		     * 12-22公里(含)5元，22-32公里(含)6元
		     *
		     * @param km 公里
		     * @return
		     */
		    @Override
		    public int calculatePrice(int km) {
		        if (km <= 6) {
		            return 3;
		        } else if (km > 6 && km <= 12) {
		            return 4;
		        } else if (km > 12 && km <= 22) {
		            return 5;
		        } else if (km > 22 && km <= 32) {
		            return 6;
		        }
		        return 7;
		    }
		}

		/**
		 * 将策略注入到TranficCalculator
		 */
		public class TranficCalculator {

		    public static void main(String[] args) {
		        TranficCalculator calculator = new TranficCalculator();
		        calculator.setStrategy(new BusStrategy());
		        System.out.println("坐16公里的公交车票价为：" + calculator.calculatePrice(16));
		    }

		    private CalculateStrategy mStrategy;

		    public void setStrategy(CalculateStrategy strategy) {
		        mStrategy = strategy;
		    }

		    public int calculatePrice(int km) {
		        return mStrategy.calculatePrice(km);
		    }
		}

		加入我们要增加车租车的价格计算，只需要增加出租车的计算策略，
		注入到TranficCalculator就可以了。

		总结
			优点：
				1.结构清晰明了，使用简单值观；
				2.耦合度相对而言较低，扩展方便；
				3.操作封装也更为彻底，数据更安全。

			缺点：
				随着策略的增加，子类也会变得繁多。

