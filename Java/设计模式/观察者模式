解决、解耦的钥匙-->观察者模式
	观察者模式一个重要的作用就是解耦，将被观察者和观察者解耦
	使得他们之间的依赖性更小，甚至做到毫无依赖。

	定义：
		定义对象间一种一对多的依赖关系，使得每当一个对象改变状态，则所有
		依赖于它的对象都会得到通知并被自动更新。

	使用场景：
		1.关联行为场景，需要注意的是，关联行为是可拆分的，而不是组合关系；
		2.事件多级触发场景；
		3.跨系统的消息交换场景，如消息队列、事件总线的处理机制。

	简单实现：

		/**
		 * 被观察者角色，当它有更新时所有的观察者都会
		 * 接到相应的通知
		 */
		public class DevTechFrontier extends Observable {

		    public void postNewPublication(String content) {
		        //标识状态或者内容发生改变
		        setChanged();
		        //通知所有观察者
		        notifyObservers(content);
		    }
		}

		/**
		 * 观察者
		 */
		public class Coder implements Observer {

		    public String name;

		    public Coder(String name) {
		        this.name = name;
		    }

		    @Override
		    public void update(Observable o, Object arg) {
		        System.out.println("Hi" + name + ",DecTechFrontier 更新啦，内容：" + arg);
		    }

		    @Override
		    public String toString() {
		        return "Coder{" +
		                "name='" + name + '\'' +
		                '}';
		    }
		}

		/**
		 * 测试
		 */
		public class Test {
		    public static void main(String[] args) {
		        // 被观察者角色
		        DevTechFrontier devTechFrontier = new DevTechFrontier();
		        //观察者
		        Coder mrsimple = new Coder("mr.simple");
		        Coder coder1 = new Coder("coder-1");
		        Coder coder2 = new Coder("coder-2");
		        Coder coder3 = new Coder("coder-3");
		        //将观察者注册到可观察对象的观察者列表中
		        devTechFrontier.addObserver(mrsimple);
		        devTechFrontier.addObserver(coder1);
		        devTechFrontier.addObserver(coder2);
		        devTechFrontier.addObserver(coder3);
		        // 发布消息
		        devTechFrontier.postNewPublication("新的一期开发技术前先周报发布啦");
		    }
		}

		Observer 和 Observable 是JDK 中内置类型。
		Observer：抽象的观察者角色
		coder：具体观察者角色
		Observable：抽象的被观察者角色
		DevTechFrontier：具体的被观察者角色

		Android中的观察者：
			BaseAdapter、BroadcastReceiber、


	优点： 
		1.观察者和被观察者之间是抽象耦合，应对业务变化；
		2.增强系统灵活性、可扩展性。

	缺点：
		在一应用观察者模式时需要考虑以下开发效率和运行效率问题，程序中包括
		一个被观察者、多个观察者、发开和调试等内容会比较复杂，而且在Java中消息的通知默认时顺序执行，一个观察者卡顿，会影响整体的执行效率，在这种情况下，一般考虑采用异步的方式。